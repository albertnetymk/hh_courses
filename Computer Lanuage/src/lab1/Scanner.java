/* The following code was generated by JFlex 1.4.2 on 2/8/10 11:52 AM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 2/8/10 11:52 AM from the specification file
 * <tt>minijava.flex</tt>
 */
class Scanner implements minijavaTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\37"+
    "\2\0\1\6\1\0\1\36\1\0\1\46\1\47\1\5\1\44\1\56"+
    "\1\45\1\43\1\4\1\10\11\11\1\0\1\54\1\57\1\55\1\60"+
    "\2\0\22\6\1\41\7\6\1\52\1\0\1\53\1\0\1\6\1\0"+
    "\1\25\1\14\1\17\1\30\1\21\1\34\1\40\1\33\1\16\2\6"+
    "\1\15\1\31\1\20\1\27\1\12\1\6\1\35\1\23\1\24\1\13"+
    "\1\26\1\22\1\32\1\42\1\6\1\50\1\0\1\51\1\0\41\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6"+
    "\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6"+
    "\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6"+
    "\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6"+
    "\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6"+
    "\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7"+
    "\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0"+
    "\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0"+
    "\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0"+
    "\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0"+
    "\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7"+
    "\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0"+
    "\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0"+
    "\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6"+
    "\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6"+
    "\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6"+
    "\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6"+
    "\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0"+
    "\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0"+
    "\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0"+
    "\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0"+
    "\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0"+
    "\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6"+
    "\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6"+
    "\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7"+
    "\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\6\16\5"+
    "\1\1\1\7\1\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\0\4\5\1\26\14\5\1\27\1\30\2\5"+
    "\1\0\3\5\1\31\1\5\1\32\20\5\1\33\3\5"+
    "\1\34\1\35\1\36\1\37\7\5\1\40\1\5\1\41"+
    "\1\5\1\42\3\5\1\43\1\5\1\44\1\5\1\45"+
    "\1\46\1\47\1\5\1\50\1\51\13\0\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\61\0\304\0\61"+
    "\0\365\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\304\0\u058d"+
    "\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\61\0\61\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\304\0\u08ff\0\304\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\304\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\304\0\304\0\304\0\304\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\304\0\u0e2a\0\304"+
    "\0\u0e5b\0\304\0\u0e8c\0\u0ebd\0\u0eee\0\304\0\u0f1f\0\304"+
    "\0\u0f50\0\304\0\304\0\304\0\u0f81\0\304\0\304\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\7\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\7\1\24\2\7\1\25"+
    "\2\7\1\26\1\27\1\30\1\31\1\7\1\32\1\7"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\63\0\1\4"+
    "\62\0\1\51\1\52\61\0\30\7\2\0\3\7\26\0"+
    "\2\11\55\0\5\7\1\53\22\7\2\0\3\7\24\0"+
    "\21\7\1\54\6\7\2\0\3\7\24\0\13\7\1\55"+
    "\14\7\2\0\3\7\24\0\12\7\1\56\13\7\1\57"+
    "\1\7\2\0\3\7\24\0\7\7\1\60\20\7\2\0"+
    "\3\7\24\0\13\7\1\61\14\7\2\0\3\7\24\0"+
    "\7\7\1\62\14\7\1\63\3\7\2\0\3\7\24\0"+
    "\25\7\1\64\2\7\2\0\3\7\24\0\16\7\1\65"+
    "\11\7\2\0\3\7\24\0\25\7\1\66\1\7\1\67"+
    "\2\0\3\7\24\0\21\7\1\70\6\7\2\0\3\7"+
    "\24\0\17\7\1\71\10\7\2\0\3\7\24\0\17\7"+
    "\1\72\10\7\2\0\3\7\24\0\13\7\1\73\14\7"+
    "\2\0\3\7\54\0\1\74\77\0\1\75\11\0\16\7"+
    "\1\76\11\7\2\0\2\7\1\77\16\0\1\51\1\3"+
    "\1\4\56\51\5\52\1\100\53\52\6\0\6\7\1\101"+
    "\21\7\2\0\3\7\24\0\21\7\1\102\6\7\2\0"+
    "\3\7\24\0\12\7\1\103\15\7\2\0\3\7\24\0"+
    "\16\7\1\104\11\7\2\0\3\7\24\0\17\7\1\105"+
    "\10\7\2\0\3\7\24\0\14\7\1\106\13\7\2\0"+
    "\3\7\24\0\15\7\1\107\12\7\2\0\3\7\24\0"+
    "\16\7\1\110\11\7\2\0\3\7\24\0\10\7\1\111"+
    "\17\7\2\0\3\7\24\0\17\7\1\112\10\7\2\0"+
    "\3\7\24\0\10\7\1\113\17\7\2\0\3\7\24\0"+
    "\5\7\1\114\22\7\2\0\3\7\24\0\10\7\1\115"+
    "\17\7\2\0\3\7\24\0\10\7\1\116\17\7\2\0"+
    "\3\7\24\0\7\7\1\117\20\7\2\0\3\7\24\0"+
    "\16\7\1\120\11\7\2\0\3\7\24\0\27\7\1\121"+
    "\2\0\3\7\24\0\15\7\1\122\12\7\2\0\3\7"+
    "\16\0\4\52\1\4\1\100\53\52\6\0\7\7\1\123"+
    "\20\7\2\0\3\7\24\0\7\7\1\124\20\7\2\0"+
    "\3\7\24\0\30\7\2\0\1\125\2\7\24\0\15\7"+
    "\1\126\12\7\2\0\3\7\24\0\13\7\1\127\14\7"+
    "\2\0\3\7\24\0\13\7\1\130\14\7\2\0\3\7"+
    "\24\0\7\7\1\131\20\7\2\0\3\7\24\0\16\7"+
    "\1\132\11\7\2\0\3\7\24\0\15\7\1\133\12\7"+
    "\2\0\3\7\24\0\13\7\1\134\14\7\2\0\3\7"+
    "\24\0\22\7\1\135\5\7\2\0\3\7\24\0\12\7"+
    "\1\136\15\7\2\0\3\7\24\0\15\7\1\137\12\7"+
    "\2\0\3\7\24\0\5\7\1\140\22\7\2\0\3\7"+
    "\24\0\10\7\1\141\17\7\2\0\3\7\24\0\16\7"+
    "\1\142\11\7\2\0\3\7\24\0\10\7\1\143\17\7"+
    "\2\0\3\7\24\0\13\7\1\144\14\7\2\0\3\7"+
    "\24\0\16\7\1\145\11\7\2\0\3\7\24\0\15\7"+
    "\1\146\12\7\2\0\3\7\24\0\12\7\1\147\15\7"+
    "\2\0\3\7\24\0\13\7\1\150\14\7\2\0\3\7"+
    "\24\0\10\7\1\151\17\7\2\0\3\7\24\0\13\7"+
    "\1\152\14\7\2\0\3\7\24\0\27\7\1\153\2\0"+
    "\3\7\24\0\12\7\1\154\15\7\2\0\3\7\24\0"+
    "\13\7\1\155\14\7\2\0\3\7\24\0\11\7\1\156"+
    "\16\7\2\0\3\7\24\0\17\7\1\157\10\7\2\0"+
    "\3\7\24\0\25\7\1\160\2\7\2\0\3\7\24\0"+
    "\22\7\1\161\5\7\2\0\3\7\24\0\11\7\1\162"+
    "\16\7\2\0\3\7\24\0\12\7\1\163\15\7\2\0"+
    "\3\7\24\0\30\7\2\0\1\164\2\7\24\0\23\7"+
    "\1\165\4\7\2\0\3\7\24\0\12\7\1\166\15\7"+
    "\2\0\3\7\24\0\15\7\1\167\12\7\2\0\3\7"+
    "\24\0\30\7\2\0\3\7\1\170\44\0\1\171\44\0"+
    "\1\172\71\0\1\173\77\0\1\174\27\0\1\175\103\0"+
    "\1\176\41\0\1\177\62\0\1\200\64\0\1\201\51\0"+
    "\1\202\63\0\1\203\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4557];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\22\1\16\11\2\0\21\1\2\11\2\1\1\0\67\1"+
    "\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
int token;
Object semanticValue;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1758) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [62] { return token=LENGTH; }");
          { return token=LENGTH;
          }
        case 43: break;
        case 24: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [83] { return token=UNEG; }");
          { return token=UNEG;
          }
        case 44: break;
        case 19: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [84] { return token=\',\'; }");
          { return token=',';
          }
        case 45: break;
        case 18: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [82] { return token=\'=\'; }");
          { return token='=';
          }
        case 46: break;
        case 34: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [58] { return token=FALSE; }");
          { return token=FALSE;
          }
        case 47: break;
        case 5: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [67] { semanticValue=yytext();return token=IDENTIFIER; }");
          { semanticValue=yytext();return token=IDENTIFIER;
          }
        case 48: break;
        case 31: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [44] { return token=MAIN; }");
          { return token=MAIN;
          }
        case 49: break;
        case 9: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [70] { return token=\'+\'; }");
          { return token='+';
          }
        case 50: break;
        case 20: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [85] { return token=\'<\'; }");
          { return token='<';
          }
        case 51: break;
        case 1: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [94] { throw new Error(\"unexpected\"+yytext()); }");
          { throw new Error("unexpected"+yytext());
          }
        case 52: break;
        case 4: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [72] { return token=\'*\'; }");
          { return token='*';
          }
        case 53: break;
        case 17: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [81] { return token=\';\'; }");
          { return token=';';
          }
        case 54: break;
        case 23: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [59] { return token=AND; }");
          { return token=AND;
          }
        case 55: break;
        case 7: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [60] { return token=\'!\'; }");
          { return token='!';
          }
        case 56: break;
        case 42: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [66] { return token=SYSTEMOUTPRINTLN; }");
          { return token=SYSTEMOUTPRINTLN;
          }
        case 57: break;
        case 16: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [79] { return token=\']\'; }");
          { return token=']';
          }
        case 58: break;
        case 41: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [46] { return token=EXTENDS; }");
          { return token=EXTENDS;
          }
        case 59: break;
        case 25: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [63] { return token=INT; }");
          { return token=INT;
          }
        case 60: break;
        case 12: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [75] { return token=\')\'; }");
          { return token=')';
          }
        case 61: break;
        case 38: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [52] { return token=RETURN; }");
          { return token=RETURN;
          }
        case 62: break;
        case 32: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [45] { return token=CLASS; }");
          { return token=CLASS;
          }
        case 63: break;
        case 28: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [47] { return token=THIS; }");
          { return token=THIS;
          }
        case 64: break;
        case 26: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [41] { return token=NEW; }");
          { return token=NEW;
          }
        case 65: break;
        case 11: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [74] { return token=\'(\'; }");
          { return token='(';
          }
        case 66: break;
        case 33: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [51] { return token=WHILE; }");
          { return token=WHILE;
          }
        case 67: break;
        case 39: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [65] { return token=STRING; }");
          { return token=STRING;
          }
        case 68: break;
        case 35: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [40] { return token=PUBLIC; }");
          { return token=PUBLIC;
          }
        case 69: break;
        case 37: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [42] { return token=STATIC; }");
          { return token=STATIC;
          }
        case 70: break;
        case 22: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [49] { return token=IF; }");
          { return token=IF;
          }
        case 71: break;
        case 15: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [78] { return token=\'[\'; }");
          { return token='[';
          }
        case 72: break;
        case 27: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [50] { return token=ELSE; }");
          { return token=ELSE;
          }
        case 73: break;
        case 14: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [77] { return token=\'}\'; }");
          { return token='}';
          }
        case 74: break;
        case 30: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [43] { return token=VOID; }");
          { return token=VOID;
          }
        case 75: break;
        case 3: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [73] { return token=\'/\'; }");
          { return token='/';
          }
        case 76: break;
        case 29: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [57] { return token=TRUE; }");
          { return token=TRUE;
          }
        case 77: break;
        case 8: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [80] { return token=\'.\'; }");
          { return token='.';
          }
        case 78: break;
        case 13: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [76] { return token=\'{\'; }");
          { return token='{';
          }
        case 79: break;
        case 6: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [64] { semanticValue=Integer.parseInt(yytext());return token=INTEGER_LITERAL; }");
          { semanticValue=Integer.parseInt(yytext());return token=INTEGER_LITERAL;
          }
        case 80: break;
        case 40: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [56] { return token=BOOLEAN; }");
          { return token=BOOLEAN;
          }
        case 81: break;
        case 10: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [71] { return token=\'-\'; }");
          { return token='-';
          }
        case 82: break;
        case 21: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [86] { return token=\'>\'; }");
          { return token='>';
          }
        case 83: break;
        case 2: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [92] {  }");
          { 
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                System.out.println("match: <<EOF>>");
                System.out.println("action [93] { return token=ENDINPUT; }");
                return token=ENDINPUT;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
